plugins {
    id 'java-library'
    id 'opensesame.base'
    id 'opensesame.publishing'
}

java.withJavadocJar()
java.withSourcesJar()

configurations {
    javadocSources {
        canBeResolved = true
    }
    javadocImplementation {
        canBeResolved = false
        canBeConsumed = false
    }
    compileOnlyApi.extendsFrom javadocImplementation
    javadocClasspath {
        canBeResolved = true
        extendsFrom javadocImplementation
    }
}

dependencies {
    [
            'mixin',
            'core',
            'groovy'
    ].each { p ->
        javadocSources project(path: ":opensesame-$p", configuration: 'sourcesElements')
        javadocImplementation project(path: ":opensesame-$p", configuration: 'apiElements')
    }

    javadocClasspath libs.jetbrains.annotations
    javadocClasspath libs.groovy.core
}

println "Building: ${rootProject.version}"

managedVersioning.mavenCentralUseBundle()

tasks.register('unpackJavadocSources') {
    dependsOn configurations.javadocSources
    inputs.files(configurations.javadocSources)
    def destinationDir = layout.buildDirectory.dir('unpackedJavadocSources').get().asFile
    outputs.dir(destinationDir)
    doLast {
        destinationDir.deleteDir()
        copy {
            into destinationDir
            configurations.javadocSources.files.each {
                from(zipTree(it)) {
                    include('**/*.java')
                    exclude('module-info.java')
                }
            }
        }

        destinationDir.traverse {
            if (it.isDirectory()) {
                def packageInfo = it.toPath().resolve('package-info.java').toFile()
                if (packageInfo.exists()) {
                    String packageInfoContent = packageInfo.text
                    if (packageInfoContent.contains('@ApiStatus.Internal')) {
                        it.listFiles().each {
                            if (it.isFile()) {
                                it.delete()
                            }
                        }
                    }
                }
            }
        }
    }
}

tasks.named('javadoc', Javadoc).configure {
    dependsOn tasks.unpackJavadocSources
    dependsOn configurations.javadocClasspath
    inputs.files(configurations.javadocClasspath)
    inputs.files(tasks.unpackJavadocSources.outputs.files)
    destinationDir = layout.buildDirectory.dir('javadoc').get().asFile
    classpath = configurations.javadocClasspath
    source(tasks.unpackJavadocSources.outputs.files)
}

components.java.withVariantsFromConfiguration(configurations.apiElements) {
    skip()
}

components.java.withVariantsFromConfiguration(configurations.runtimeElements) {
    skip()
}

components.java.withVariantsFromConfiguration(configurations.sourcesElements) {
    skip()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                openSesameConvention.pomShared(it, '')
                description = 'A tool for breaking encapsulation in JVM projects'
                packaging = 'pom'
            }
        }
    }
}
