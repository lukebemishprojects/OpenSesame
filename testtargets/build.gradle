import javax.inject.Inject

plugins {
    id 'java-library'
    id 'opensesame.base'
}

sourceSets {
    transformationTest {}
}

java {
    registerFeature('metafactoryTest') {
        usingSourceSet(sourceSets.create('metafactoryTest'))
        disablePublication()
    }
}

configurations {
    consumable('testSource') {
        outgoing.capability("${project.group}:testtargets-transformation-sources:${project.version}" as String)
        attributes {
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, 'java-sources'))
        }
    }
    dependencyScope('compileAsm')
    resolvable('compileAsmClasspath') {
        extendsFrom compileAsm
    }
    dependencyScope('testBundleImplementation')
    resolvable('testBundleClasspath') {
        extendsFrom testBundleImplementation
    }
}

dependencies {
    transformationTestImplementation project(':opensesame-core')
    transformationTestImplementation libs.asm.core
    transformationTestImplementation project(':testtargets')
    transformationTestImplementation libs.testingutils.framework

    metafactoryTestCompileOnly libs.jetbrains.annotations
    
    metafactoryTestImplementation project(':opensesame-core')
    metafactoryTestImplementation project(':opensesame-natives')
    metafactoryTestImplementation project(':opensesame-javac')
    metafactoryTestImplementation libs.asm.core

    metafactoryTestImplementation project(':testtargets')
    
    compileAsm(project(':opensesame-compile')) {
        capabilities {
            requireFeature 'asm'
        }
    }
}

def tempClassesDir = layout.buildDirectory.dir("tempClasses/compileJava")

tasks.named('compileMetafactoryTestJava', JavaCompile).configure {
    destinationDirectory.set(tempClassesDir)
}

var processTestClasses = tasks.register('processMetafactoryTestClasses', JavaExec) {
    dependsOn tasks.compileMetafactoryTestJava
    dependsOn configurations.compileAsmClasspath
    inputs.dir(tempClassesDir)
    var singleFile = sourceSets.metafactoryTest.output.classesDirs.singleFile;
    doFirst {
        if (singleFile.exists()) {
            singleFile.deleteDir()
        }
        singleFile.mkdirs()
    }
    inputs.files(configurations.compileAsmClasspath)
    outputs.dir(singleFile)
    classpath = configurations.compileAsmClasspath
    mainClass.set 'dev.lukebemish.opensesame.compile.asm.VisitingProcessor'
    args = [tempClassesDir.get().asFile.canonicalPath, singleFile.canonicalPath]
}

tasks.metafactoryTestClasses.dependsOn processMetafactoryTestClasses

artifacts {
    testSource(sourceSets.transformationTest.java.sourceDirectories.singleFile) {
        type 'directory'
        classifier 'testsources'
    }
}

testingUtils.makeTestingEnvironment(sourceSets.metafactoryTest) {
    modular = true
    testModules.add 'dev.lukebemish.opensesame.test.metafactory'
    jvmArgs.addAll([
            '-ea',

            // Avoid warnings; native access is necessary for these components (FFI and native lookup providers)
            '--enable-native-access=dev.lukebemish.opensesame.core',
            '--enable-native-access=dev.lukebemish.opensesame.natives',

            // Necessary for opensesame-javac, for use in the module layer framework
            '--add-exports=jdk.compiler/com.sun.tools.javac.api=dev.lukebemish.javacpostprocessor',
            '--add-exports=jdk.compiler/com.sun.tools.javac.jvm=dev.lukebemish.javacpostprocessor',
            '--add-exports=jdk.compiler/com.sun.tools.javac.util=dev.lukebemish.javacpostprocessor',

            // Let our test framework test the native-access bits
            '--add-opens=dev.lukebemish.opensesame.natives/dev.lukebemish.opensesame.natives=dev.lukebemish.opensesame.test.metafactory',
            '--add-opens=dev.lukebemish.opensesame.core/dev.lukebemish.opensesame.runtime=dev.lukebemish.opensesame.test.metafactory'
    ])
}

tasks.named('testingUtilsRunTestEnvironment', JavaExec) {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(22))
    }
}
