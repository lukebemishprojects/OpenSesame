plugins {
    id 'opensesame.conventions'
}

java.withSourcesJar()
java.withJavadocJar()

configurations {
    bundle
}

dependencies {
    compileOnly libs.fabric.loader
    api project(':opensesame-core')
    api project(':opensesame-mixin')
    bundle(project(':opensesame-core')) {
        transitive = false
    }
    bundle(project(':opensesame-mixin')) {
        transitive = false
    }
}

import dev.lukebemish.opensesame.convention.FabricModJson
import dev.lukebemish.opensesame.convention.Bundler

tasks.register('bundle', Bundler) {
    bundleConfiguration configurations.bundle
    outputDirectory = layout.buildDirectory.dir("bundler")
    modType = 'LIBRARY'
    modulePrefix = 'org.groovymc.groovybundler.jij'
}

tasks.register('generateFMJ', FabricModJson) {
    projectGroup = project.group
    projectVersion = project.version.toString()
    projectName = project.name
    bundledDependencies = configurations.bundle
    outputDirectory = layout.buildDirectory.dir("fabricModJson")
}

jar {
    dependsOn tasks.bundle
    from(tasks.bundle.outputDirectory)
    from(tasks.generateFMJ.outputDirectory)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                openSesameConvention.pomShared(it, 'Fabric')
                description = 'Fabric compatibility for OpenSesame, a tool for typesafe access to normally inaccessible members'
            }
        }
    }
}