pluginManagement {
    repositories {
        gradlePluginPortal()
        maven {
            url = "https://maven.lukebemish.dev/releases/"
        }
    }
    includeBuild 'build-logic'
}

plugins {
    id 'dev.lukebemish.central-portal-publishing' version '0.1.7' apply false
    id 'dev.lukebemish.testingutils' version '0.1.12'
    id 'dev.lukebemish.managedversioning' version '2.0.0-beta.6'
    id 'dev.lukebemish.conventions' version '0.2.0-beta.2'
    id 'dev.lukebemish.zig-gradle' version '0.1.0'
}

managedVersioning {
    versionFile.set file('version.properties')
    versionPRs()
    versionSnapshots()

    publishing {
        mavenStaging()
        mavenSnapshot()
        mavenPullRequest()
        mavenCentralMakeBundle()
    }

    gitHubActions {
        release {
            prettyName = 'Release'
            workflowDispatch = true
            gradleJob {
                name = 'build'
                javaVersion.set '21'
                setupGitUser()
                readOnly = false
                gradlew 'Tag Release', 'tagRelease'
                gradlew 'Build', 'build'
                push()
                recordVersion 'Record Version', 'version'
                dependencySubmission()
            }
            gradleJob {
                name.set 'publishCentral'
                javaVersion.set '21'
                buildCache()
                needs.add('build')
                gradlew 'Publish', 'publish'
                tag.set('${{needs.build.outputs.version}}')
                sign()
                mavenCentral()
            }
            gradleJob {
                name.set 'publishPlugins'
                javaVersion.set '21'
                buildCache()
                needs.add('build')
                gradlew 'Publish Plugins', 'publishPlugins'
                tag.set('${{needs.build.outputs.version}}')
                sign()
                pluginPortal()
            }
        }

        def platformTest = { dev.lukebemish.managedversioning.actions.GitHubAction action ->
            action.job {
                name.set 'aggregate-test-results'
                runsOn.set 'ubuntu-latest'
                needs.add('platform-test')
                getIf().set('always()')
                step {
                    name.set 'Download Platform Results'
                    uses.set 'actions/download-artifact@v4'
                    with.put 'pattern', 'junit-test-results-platform-*'
                }
                step {
                    name.set 'Download Gradle Results'
                    runsOnError.set true
                    uses.set 'actions/download-artifact@v4'
                    with.put 'pattern', 'junit-test-results-gradle'
                }
                step {
                    name.set 'Upload Results'
                    uses.set 'actions/upload-artifact@v4'
                    with.put 'name', 'junit-test-results-platform'
                    with.put 'path', '**/open-test-report.xml'
                }
                step {
                    name.set 'Find Reports'
                    id.set 'findreports'
                    run.set 'find . -name "open-test-report.xml" >> reports.txt'
                }
                step {
                    name.set 'Setup Java'
                    id.set 'setup-java'
                    uses.set 'actions/setup-java@v4'
                    with.put 'distribution', 'temurin'
                    with.put 'java-version', '21'
                }
                step {
                    name.set 'Download Open Test Reporting CLI'
                    id.set 'download-cli'
                    run.set 'curl -o open-test-reporting-cli.jar https://repo1.maven.org/maven2/org/opentest4j/reporting/open-test-reporting-cli/0.2.4/open-test-reporting-cli-0.2.4-standalone.jar'
                }
                step {
                    name.set 'Generate HTML Report'
                    id.set 'generate'
                    runsOnError.set true
                    requiredSteps.add 'findreports'
                    requiredSteps.add 'download-cli'
                    run.set 'java -jar open-test-reporting-cli.jar html-report @reports.txt --output=report.html'
                }
                step {
                    name.set 'Upload HTML Report'
                    runsOnError.set true
                    requiredSteps.add 'generate'
                    uses.set 'actions/upload-artifact@v4'
                    with.put 'name', 'test-report'
                    with.put 'path', 'report.html'
                }
            }
        }

        snapshot {
            prettyName.set 'Snapshot'
            workflowDispatch.set(true)
            onBranches.add 'main'
            gradleJob {
                buildCache()
                name.set 'build'
                javaVersion.set '21'
                gradlew 'Publish', 'publish'
                mavenSnapshot('github')
            }
        }
        build_pr {
            prettyName.set 'Build PR'
            pullRequest.set(true)
            gradleJob {
                javaVersion.set '21'
                name.set 'build'
                gradlew 'Publish', 'publish'
                pullRequestArtifact()
            }
        }
        publish_pr {
            concurrency.unsetConvention()
            concurrency.unset()
            prettyName.set 'Publish PR'
            publishPullRequestAction(
                    'github',
                    "dev/lukebemish/opensesame/opensesame-*",
                    'Build PR'
            )
        }
    }
}

testingUtils {
    onBranches.add 'main'
    gradleRoots.add './testplugin'
    platform {
        enabled = true
        javaVersions = ['17', '21', '24']
        exclude('windows', 'aarch64', '17')
        exclude('windows', 'aarch64', '24')
        testEnvironmentProject = 'testtargets'
    }
}

gradle.lifecycle.beforeProject {
    tasks.withType(Sign).configureEach {
        // Gradle broke something in 8.8 here, and now you can't publish plugins to other mavens if signing is disabled...
        enabled System.getenv('GPG_KEY') !== null
    }
    
    pluginManager.withPlugin('publishing') {
        publishing {
            publications.configureEach {
                managedVersioning.sign(signing, it)
            }
        }
    }
}

dependencyResolutionManagement {
    repositories {
        mavenCentral()
        maven {
            name = 'FabricMC'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/maven'
        }
        gradlePluginPortal()
    }
    repositoriesMode = RepositoriesMode.FAIL_ON_PROJECT_REPOS
}

rootProject.name = 'opensesame'

def subprojects = [
        'core',
        'natives',
        'compile',
        'groovy',
        'javac',
        'plugin-core',
        'plugin-loom',
        'fabric',
        'mixin'
]

include subprojects

subprojects.each {
    def p = project(":$it")
    p.projectDir = file(it.replace('-', '/').replace(':', '/'))
    p.name = "opensesame-$it".split(':')[-1]
}

include 'testtargets'
