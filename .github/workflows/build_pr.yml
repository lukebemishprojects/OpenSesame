{
    "name": "Build PR",
    "concurrency": "ci-${{ github.ref }}",
    "on": {
        "pull_request": {
            
        }
    },
    "jobs": {
        "build": {
            "runs-on": "ubuntu-22.04",
            "steps": [
                {
                    "name": "Setup Java",
                    "run": "echo \"JAVA_HOME=$JAVA_HOME_21_X64\" >> \"$GITHUB_ENV\""
                },
                {
                    "name": "Checkout",
                    "uses": "actions/checkout@v4",
                    "with": {
                        "fetch-depth": "0",
                        "persist-credentials": "false"
                    }
                },
                {
                    "name": "Validate Gradle Wrapper",
                    "uses": "gradle/actions/wrapper-validation@v4"
                },
                {
                    "name": "Cache",
                    "uses": "actions/cache/restore@v4",
                    "with": {
                        "path": "**/.gradle/loom-cache\n**/.gradle/quilt-loom-cache",
                        "key": "${{ runner.os }}-gradle-${{ hashFiles('**/libs.versions.*', '**/*.gradle*', '**/gradle-wrapper.properties') }}",
                        "restore-keys": "${{ runner.os }}-gradle-"
                    }
                },
                {
                    "name": "Setup Gradle",
                    "uses": "gradle/actions/setup-gradle@v4",
                    "with": {
                        "cache-read-only": true,
                        "gradle-home-cache-cleanup": true
                    }
                },
                {
                    "name": "Assemble",
                    "id": "assemble",
                    "run": "./gradlew assemble :opensesame-natives:setupTestEnvironment",
                    "env": {
                        "PR_NUMBER": "${{ github.event.pull_request.number }}"
                    }
                },
                {
                    "name": "Upload natives-test-environment",
                    "uses": "actions/upload-artifact@v4",
                    "with": {
                        "name": "natives-test-environment",
                        "path": "natives/build/testEnvironment/*",
                        "retention-days": "1"
                    }
                },
                {
                    "name": "Test",
                    "id": "test",
                    "run": "./gradlew check --continue",
                    "env": {
                        "PR_NUMBER": "${{ github.event.pull_request.number }}"
                    }
                },
                {
                    "name": "Test Plugin",
                    "id": "test_plugin",
                    "run": "./gradlew check --continue",
                    "if": "(success() || failure()) && steps.assemble.outcome == 'success'",
                    "env": {
                        "PR_NUMBER": "${{ github.event.pull_request.number }}"
                    },
                    "working-directory": "./testplugin"
                },
                {
                    "name": "Upload junit-test-results-gradle",
                    "uses": "actions/upload-artifact@v4",
                    "if": "(success() || failure()) && steps.assemble.outcome == 'success'",
                    "with": {
                        "name": "junit-test-results-gradle",
                        "path": "**/build/test-results/*/TEST-*.xml",
                        "retention-days": "1"
                    }
                },
                {
                    "name": "Publish",
                    "id": "publish",
                    "run": "./gradlew publish",
                    "env": {
                        "PR_NUMBER": "${{ github.event.pull_request.number }}"
                    }
                },
                {
                    "name": "Archive Publishable Artifacts",
                    "uses": "actions/upload-artifact@v4",
                    "with": {
                        "name": "artifacts",
                        "path": "build/repo"
                    }
                }
            ]
        },
        "natives-test": {
            "runs-on": "${{ matrix.runner }}",
            "steps": [
                {
                    "name": "Download Artifact",
                    "id": "download",
                    "uses": "actions/download-artifact@v4",
                    "with": {
                        "name": "natives-test-environment"
                    }
                },
                {
                    "name": "Setup QEMU",
                    "uses": "docker/setup-qemu-action@v3",
                    "if": "${{ matrix.qemu }}"
                },
                {
                    "name": "Run with Docker",
                    "run": "docker run --workdir \"${GITHUB_WORKSPACE}\" -v \"${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE}:z\" --rm --platform linux/${{ matrix.docker_arch }} -t ${{ matrix.docker }} /bin/bash -c 'mkdir ../working; cp -r ./ ../working/; cd ../working; java @args-${{ matrix.os }}.txt; return=$?; cp -r ./ ${GITHUB_WORKSPACE}/; cd ${GITHUB_WORKSPACE}; exit $return'",
                    "if": "${{ matrix.docker }}"
                },
                {
                    "name": "Run",
                    "run": "${{ matrix.java_home }}/bin/java @args-${{ matrix.os }}.txt",
                    "if": "${{ !matrix.qemu }}",
                    "shell": "bash"
                },
                {
                    "name": "Upload Results",
                    "uses": "actions/upload-artifact@v4",
                    "if": "(success() || failure()) && steps.download.outcome == 'success'",
                    "with": {
                        "name": "junit-test-results-native-${{ matrix.os }}-${{ matrix.arch }}",
                        "path": "results/TEST-*.xml"
                    }
                }
            ],
            "needs": [
                "build"
            ],
            "strategy": {
                "fail-fast": false,
                "matrix": {
                    "os": [
                        "linux",
                        "windows",
                        "macos"
                    ],
                    "arch": [
                        "x86_64",
                        "aarch64",
                        "arm"
                    ],
                    "exclude": [
                        {
                            "os": "macos",
                            "arch": "i386"
                        },
                        {
                            "os": "macos",
                            "arch": "arm"
                        },
                        {
                            "os": "windows",
                            "arch": "arm"
                        },
                        {
                            "os": "windows",
                            "arch": "aarch64"
                        },
                        {
                            "os": "macos",
                            "arch": "x86_64"
                        },
                        {
                            "os": "linux",
                            "arch": "arm"
                        }
                    ],
                    "include": [
                        {
                            "os": "macos",
                            "runner": "macos-latest",
                            "java_home": "$JAVA_HOME_17_arm64"
                        },
                        {
                            "os": "windows",
                            "runner": "windows-latest",
                            "java_home": "$JAVA_HOME_17_X64"
                        },
                        {
                            "os": "linux",
                            "runner": "ubuntu-latest",
                            "java_home": "$JAVA_HOME_17_X64"
                        },
                        {
                            "os": "linux",
                            "arch": "aarch64",
                            "qemu": "arm64",
                            "docker_arch": "arm64",
                            "docker": "arm64v8/eclipse-temurin:17"
                        }
                    ]
                }
            }
        },
        "aggregate-test-results": {
            "runs-on": "ubuntu-latest",
            "steps": [
                {
                    "name": "Download Artifact",
                    "id": "download",
                    "uses": "actions/download-artifact@v4",
                    "with": {
                        "pattern": "junit-test-results-*"
                    }
                },
                {
                    "name": "Upload Results",
                    "uses": "actions/upload-artifact@v4",
                    "with": {
                        "name": "junit-test-results",
                        "path": "**/TEST-*.xml"
                    }
                }
            ],
            "if": "always()",
            "needs": [
                "natives-test",
                "build"
            ]
        }
    }
}