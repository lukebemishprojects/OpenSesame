{
    "name": "Snapshot",
    "concurrency": "ci-${{ github.ref }}",
    "on": {
        "push": {
            "branches": [
                "main"
            ]
        },
        "workflow_dispatch": {
            
        }
    },
    "jobs": {
        "build": {
            "runs-on": "ubuntu-22.04",
            "steps": [
                {
                    "name": "Setup Java",
                    "run": "echo \"JAVA_HOME=$JAVA_HOME_21_X64\" >> \"$GITHUB_ENV\""
                },
                {
                    "name": "Checkout",
                    "uses": "actions/checkout@v4",
                    "with": {
                        "fetch-depth": "0",
                        "persist-credentials": "false"
                    }
                },
                {
                    "name": "Validate Gradle Wrapper",
                    "uses": "gradle/actions/wrapper-validation@v4"
                },
                {
                    "name": "Cache",
                    "uses": "actions/cache/restore@v4",
                    "with": {
                        "path": "**/.gradle/loom-cache\n**/.gradle/quilt-loom-cache",
                        "key": "${{ runner.os }}-gradle-${{ hashFiles('**/libs.versions.*', '**/*.gradle*', '**/gradle-wrapper.properties') }}",
                        "restore-keys": "${{ runner.os }}-gradle-"
                    }
                },
                {
                    "name": "Setup Gradle",
                    "uses": "gradle/actions/setup-gradle@v4",
                    "with": {
                        "cache-read-only": true,
                        "gradle-home-cache-cleanup": true
                    }
                },
                {
                    "name": "Assemble",
                    "id": "assemble",
                    "run": "./gradlew assemble :testtargets:setupTestEnvironment",
                    "env": {
                        "BUILD_CACHE_PASSWORD": "${{ secrets.BUILD_CACHE_PASSWORD }}",
                        "BUILD_CACHE_USER": "${{ secrets.BUILD_CACHE_USER }}",
                        "BUILD_CACHE_URL": "${{ secrets.BUILD_CACHE_URL }}",
                        "SNAPSHOT_MAVEN_PASSWORD": "${{ secrets.SNAPSHOT_MAVEN_PASSWORD }}",
                        "SNAPSHOT_MAVEN_USER": "github",
                        "SNAPSHOT_MAVEN_URL": "https://maven.lukebemish.dev/snapshots/"
                    }
                },
                {
                    "name": "Upload platform-test-environment",
                    "uses": "actions/upload-artifact@v4",
                    "with": {
                        "name": "platform-test-environment",
                        "path": "testtargets/build/testEnvironment/*",
                        "retention-days": "1"
                    }
                },
                {
                    "name": "Test",
                    "id": "test",
                    "run": "./gradlew check --continue",
                    "env": {
                        "BUILD_CACHE_PASSWORD": "${{ secrets.BUILD_CACHE_PASSWORD }}",
                        "BUILD_CACHE_USER": "${{ secrets.BUILD_CACHE_USER }}",
                        "BUILD_CACHE_URL": "${{ secrets.BUILD_CACHE_URL }}",
                        "SNAPSHOT_MAVEN_PASSWORD": "${{ secrets.SNAPSHOT_MAVEN_PASSWORD }}",
                        "SNAPSHOT_MAVEN_USER": "github",
                        "SNAPSHOT_MAVEN_URL": "https://maven.lukebemish.dev/snapshots/"
                    }
                },
                {
                    "name": "Test Plugin",
                    "id": "test_plugin",
                    "run": "./gradlew check --continue",
                    "if": "(success() || failure()) && steps.assemble.outcome == 'success'",
                    "env": {
                        "BUILD_CACHE_PASSWORD": "${{ secrets.BUILD_CACHE_PASSWORD }}",
                        "BUILD_CACHE_USER": "${{ secrets.BUILD_CACHE_USER }}",
                        "BUILD_CACHE_URL": "${{ secrets.BUILD_CACHE_URL }}",
                        "SNAPSHOT_MAVEN_PASSWORD": "${{ secrets.SNAPSHOT_MAVEN_PASSWORD }}",
                        "SNAPSHOT_MAVEN_USER": "github",
                        "SNAPSHOT_MAVEN_URL": "https://maven.lukebemish.dev/snapshots/"
                    },
                    "working-directory": "./testplugin"
                },
                {
                    "name": "Upload junit-test-results-gradle",
                    "uses": "actions/upload-artifact@v4",
                    "if": "(success() || failure()) && steps.assemble.outcome == 'success'",
                    "with": {
                        "name": "junit-test-results-gradle",
                        "path": "**/build/test-results/*/TEST-*.xml",
                        "retention-days": "1"
                    }
                },
                {
                    "name": "Publish",
                    "id": "publish",
                    "run": "./gradlew publish",
                    "env": {
                        "BUILD_CACHE_PASSWORD": "${{ secrets.BUILD_CACHE_PASSWORD }}",
                        "BUILD_CACHE_USER": "${{ secrets.BUILD_CACHE_USER }}",
                        "BUILD_CACHE_URL": "${{ secrets.BUILD_CACHE_URL }}",
                        "SNAPSHOT_MAVEN_PASSWORD": "${{ secrets.SNAPSHOT_MAVEN_PASSWORD }}",
                        "SNAPSHOT_MAVEN_USER": "github",
                        "SNAPSHOT_MAVEN_URL": "https://maven.lukebemish.dev/snapshots/"
                    }
                }
            ]
        },
        "platform-test": {
            "runs-on": "${{ matrix.runner }}",
            "steps": [
                {
                    "name": "Download Artifact",
                    "id": "download",
                    "uses": "actions/download-artifact@v4",
                    "with": {
                        "name": "platform-test-environment"
                    }
                },
                {
                    "name": "Setup QEMU",
                    "uses": "docker/setup-qemu-action@v3",
                    "if": "${{ matrix.qemu }}"
                },
                {
                    "name": "Setup Java",
                    "uses": "actions/setup-java@v4",
                    "with": {
                        "distribution": "temurin",
                        "java-version": "${{ matrix.java }}"
                    },
                    "if": "${{ !matrix.qemu }}"
                },
                {
                    "name": "Run with Docker",
                    "run": "docker run --workdir \"${GITHUB_WORKSPACE}\" -v \"${GITHUB_WORKSPACE}:${GITHUB_WORKSPACE}:z\" --rm --platform linux/${{ matrix.docker_arch }} -t ${{ matrix.docker }} /bin/bash -c 'mkdir ../working; cp -r ./ ../working/; cd ../working; java @args.txt; return=$?; cp -r ./ ${GITHUB_WORKSPACE}/; cd ${GITHUB_WORKSPACE}; exit $return'",
                    "if": "${{ matrix.docker }}"
                },
                {
                    "name": "Run",
                    "run": "java @args.txt",
                    "if": "${{ !matrix.qemu }}",
                    "shell": "bash"
                },
                {
                    "name": "Upload Results",
                    "uses": "actions/upload-artifact@v4",
                    "if": "(success() || failure()) && steps.download.outcome == 'success'",
                    "with": {
                        "name": "junit-test-results-platform-${{ matrix.os }}-${{ matrix.arch }}-${{ matrix.java }}",
                        "path": "results/TEST-*.xml"
                    }
                }
            ],
            "needs": [
                "build"
            ],
            "strategy": {
                "fail-fast": false,
                "matrix": {
                    "os": [
                        "linux",
                        "windows",
                        "macos"
                    ],
                    "arch": [
                        "x86_64",
                        "aarch64",
                        "arm"
                    ],
                    "java": [
                        "17",
                        "21",
                        "22"
                    ],
                    "exclude": [
                        {
                            "os": "macos",
                            "arch": "i386"
                        },
                        {
                            "os": "macos",
                            "arch": "arm"
                        },
                        {
                            "os": "windows",
                            "arch": "arm"
                        },
                        {
                            "os": "windows",
                            "arch": "aarch64"
                        },
                        {
                            "os": "macos",
                            "arch": "x86_64"
                        },
                        {
                            "os": "linux",
                            "arch": "arm"
                        }
                    ],
                    "include": [
                        {
                            "os": "macos",
                            "runner": "macos-latest"
                        },
                        {
                            "os": "windows",
                            "runner": "windows-latest"
                        },
                        {
                            "os": "linux",
                            "runner": "ubuntu-latest"
                        },
                        {
                            "os": "linux",
                            "arch": "aarch64",
                            "java": "17",
                            "qemu": "arm64",
                            "docker_arch": "arm64",
                            "docker": "arm64v8/eclipse-temurin:17"
                        },
                        {
                            "os": "linux",
                            "arch": "aarch64",
                            "java": "21",
                            "qemu": "arm64",
                            "docker_arch": "arm64",
                            "docker": "arm64v8/eclipse-temurin:21"
                        },
                        {
                            "os": "linux",
                            "arch": "aarch64",
                            "java": "17",
                            "qemu": "arm64",
                            "docker_arch": "arm64",
                            "docker": "arm64v8/eclipse-temurin:22"
                        }
                    ]
                }
            }
        },
        "aggregate-test-results": {
            "runs-on": "ubuntu-latest",
            "steps": [
                {
                    "name": "Download Artifact",
                    "id": "download",
                    "uses": "actions/download-artifact@v4",
                    "with": {
                        "pattern": "junit-test-results-platform-*"
                    }
                },
                {
                    "name": "Upload Results",
                    "uses": "actions/upload-artifact@v4",
                    "with": {
                        "name": "junit-test-results-platform",
                        "path": "**/TEST-*.xml"
                    }
                }
            ],
            "if": "always()",
            "needs": [
                "natives-test"
            ]
        }
    }
}