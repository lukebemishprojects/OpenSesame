plugins {
    id 'opensesame.conventions'
}

java.withSourcesJar()
java.withJavadocJar()

configurations {
    testSource {
        canBeResolved = true
    }
}

dependencies {
    implementation(project(':opensesame-compile')) {
        capabilities {
            requireCapability 'dev.lukebemish.opensesame:opensesame-compile-asm'
        }
    }
    api project(':opensesame-core')
    implementation libs.asm.core
    implementation libs.javacpostprocessor

    testSource(project(':testtargets')) {
        capabilities {
            requireFeature 'transformation-sources'
        }
    }
    testAnnotationProcessor project(':opensesame-javac')
}

tasks.named('compileTestJava', JavaCompile).configure {
    dependsOn(configurations.testSource)
    source(configurations.testSource)
    options.compilerArgs.add '-Xplugin:dev.lukebemish.javac-post-processor dev.lukebemish.opensesame'
    // For javac-post-processor
    options.forkOptions.jvmArgs.addAll([
            '--add-exports=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED',
            '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    ])
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                openSesameConvention.pomShared(it, 'Javac Compiler Plugin')
                description = 'javac compiler plugin for OpenSesame, a tool for typesafe access to normally inaccessible members'
            }
        }
    }
}
