import dev.lukebemish.ziggradle.toolchain.ZigVersion
import dev.lukebemish.ziggradle.ZigCompileTask
import dev.lukebemish.ziggradle.ZigArchitectureTarget
import dev.lukebemish.ziggradle.ZigOperatingSystemTarget
import dev.lukebemish.ziggradle.ZigArtifactType
import javax.inject.Inject

plugins {
    id 'opensesame.conventions'
    id 'dev.lukebemish.zig-gradle'
}

java.withSourcesJar()
java.withJavadocJar()

def targets = [
        'linux': ['x86_64', 'aarch64', 'i386', 'arm'],
        'windows': ['x86_64', 'aarch64', 'i386'],
        'macos': ['x86_64', 'aarch64']
]

def targetfinder = [
        'linux': 'libopensesamenative.so',
        'windows': 'opensesamenative.dll',
        'macos': 'libopensesamenative.dylib'
]

zig {
    toolchain {
        version = ZigVersion.of('0.14.0')
    }
}

tasks.named('compileJava', JavaCompile) {
    options.headerOutputDirectory.set(project.layout.buildDirectory.dir("headers/main"))
}

def registerZigCompile(String os, String arch, String finalName) {
    def archmap = [
            'x86_64': ZigArchitectureTarget.X86_64,
            'aarch64': ZigArchitectureTarget.AARCH64,
            'i386': ZigArchitectureTarget.X86,
            'arm': objects.named(ZigArchitectureTarget, 'arm')
    ]

    def jniHeaders = [
            'linux': zig.jniHeadersUnixOpenJDK("tags/jdk-17+35"),
            'windows': zig.jniHeadersWindowsOpenJDK("tags/jdk-17+35"),
            'macos': zig.jniHeadersUnixOpenJDK("tags/jdk-17+35")
    ]

    return project.tasks.register('zigCompile-'+os+'-'+arch, ZigCompileTask) {
        zigCompiler = zig.compilerFor {}
        options {
            artifactType = ZigArtifactType.LIBRARY
            compilerArgs.addAll([
                    "--gc-sections",
                    "-lc",
                    "-ffunction-sections",
                    "-fdata-sections",
                    "-cflags",
                    "-nostdlib",
                    "-nobuiltininc",
                    "--",
                    "-O",
                    "ReleaseSmall"
            ])
            targetOperatingSystem = objects.named(ZigOperatingSystemTarget, os)
            targetArchitecture = archmap[arch]
            dynamic = true
        }
        baseArtifactName = "opensesamenative"
        headers.from(tasks.named('compileJava').flatMap { it.options.headerOutputDirectory })
        headers.from(jniHeaders[os])
        sourceFiles.from('src/natives/opensesamenative.c')
        outputDirectory = project.layout.buildDirectory.dir("natives/"+os+'-'+arch)
    }
}

targets.each { os, archs ->
    archs.each { arch ->
        def finalName = targetfinder[os]
        def extension = finalName.split(/\./)[1]
        var task = registerZigCompile(os, arch, finalName)
        ConfigurableFileCollection files = project.objects.fileCollection()
        processResources {
            from(task.flatMap { it.outputDirectory }.map { it.file(finalName) }) {
                into "dev/lukebemish/opensesame/natives/$os/$arch"
            }
            dependsOn task
        }
    }
}

dependencies {
    compileOnly project(':opensesame-core')
}

configurations {
    runtimeElements {
        outgoing.variants.clear()
    }
    apiElements {
        outgoing.variants.clear()
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                openSesameConvention.pomShared(it, 'Core')
                description = 'Native code for OpenSesame, a tool for typesafe access to normally inaccessible members'
            }
        }
    }
}
