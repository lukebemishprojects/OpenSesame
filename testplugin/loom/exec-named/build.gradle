import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'java'
    id 'fabric-loom'
}

loom {
    knownIndyBsms.add 'dev/lukebemish/opensesame/runtime/OpeningMetafactory'
    runs.removeAll()
}

group='dev.lukebemish.opensesame'

java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))

configurations {
    testClasses {
        canBeResolved = true
    }
}

repositories {
    mavenCentral()
    maven {
        url = "https://maven.lukebemish.dev/releases/"
    }
    maven {
        name = 'SpongePowered'
        url = 'https://repo.spongepowered.org/maven'
    }
}

dependencies {
    minecraft 'com.mojang:minecraft:1.20.4'
    mappings loom.officialMojangMappings()

    testClasses project(path: ':loom', configuration: 'testClasses')

    modImplementation libs.fabric.loader

    testImplementation 'dev.lukebemish.opensesame:testtargets'
    testImplementation 'dev.lukebemish.opensesame:opensesame-core'
    testImplementation libs.asm.core
    testRuntimeOnly 'dev.lukebemish.opensesame:opensesame-fabric'
}

tasks.register('remapTestClasses', RemapJarTask).configure {
    dependsOn configurations.testClasses
    inputFile.set configurations.testClasses.singleFile
    targetNamespace.set 'named'
    sourceNamespace.set 'intermediary'
    archiveClassifier.set 'remapped'
}

tasks.register('unpackRemappedJar', Copy).configure {
    dependsOn tasks.remapTestClasses
    from zipTree(tasks.remapTestClasses.archiveFile)
    into layout.buildDirectory.dir('unpacked')
}

test {
    useJUnitPlatform()

    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
        showCauses = true
        showStackTraces = true
        events = ['passed', 'failed', 'skipped']
    }

    testClassesDirs.from tasks.unpackRemappedJar.outputs
    classpath.from tasks.unpackRemappedJar.outputs

    enableAssertions = true
}
