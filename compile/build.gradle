plugins {
    id 'opensesame.conventions'
    id 'opensesame.testing'
}

java.withSourcesJar()
java.withJavadocJar()

sourceSets {
    asm {}
}

java.registerFeature('asm') {
    usingSourceSet(sourceSets.asm)
    withSourcesJar()
    withJavadocJar()
}

configurations {
    testSource {
        canBeResolved = true
    }
    testBundle {
        canBeResolved = true
    }
}

dependencies {
    api project(':opensesame-core')
    asmApi libs.asm.core
    asmApi libs.asm.tree
    asmApi project
    asmCompileOnly libs.jetbrains.annotations

    testSource project(path: ':testtargets', configuration: 'testSource')

    testImplementation project(path: ':opensesame-compile', configuration: 'asmRuntimeElements')
}

def tempClassesDir = layout.buildDirectory.dir("tempClasses/compileJava")

tasks.named('compileTestJava', JavaCompile).configure {
    dependsOn(configurations.testSource)
    source(configurations.testSource)
    destinationDirectory.set(tempClassesDir)
}

var processTestClasses = tasks.register('processTestClasses', JavaExec) {
    dependsOn compileTestJava
    dependsOn configurations.asmRuntimeClasspath
    inputs.dir(tempClassesDir)
    inputs.files(sourceSets.asm.runtimeClasspath)
    outputs.dir(sourceSets.test.output.classesDirs)
    classpath = sourceSets.asm.runtimeClasspath
    mainClass.set 'dev.lukebemish.opensesame.compile.asm.VisitingProcessor'
    args = [tempClassesDir.get().asFile.canonicalPath, sourceSets.test.output.classesDirs.singleFile.canonicalPath]
}

tasks.testClasses.dependsOn processTestClasses

processAsmResources {
    from(rootProject.isolated.projectDirectory.file('LICENSE')) {
        into 'META-INF'
    }
}

asmJar {
    manifest {
        attributes([
                'Implementation-Version'   : (version as String),
                'Specification-Version'   : (version as String).split("-")[0],
                'Implementation-Commit-Time': managedVersioning.timestamp.get(),
                'Implementation-Commit': managedVersioning.hash.get(),
                'Automatic-Module-Name'   : 'dev.lukebemish.opensesame.compile.asm',
                'FMLModType': 'LIBRARY'
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                openSesameConvention.pomShared(it, 'Compile')
                description = 'Compile-time abstractions for OpenSesame, a tool for typesafe access to normally inaccessible members'
            }
        }
    }
}
